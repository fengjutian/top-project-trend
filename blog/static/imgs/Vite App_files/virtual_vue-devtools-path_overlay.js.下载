import { functions, setDevToolsClientUrl } from "/node_modules/.pnpm/@vue+devtools-core@8.0.0_ro_9df5a01afe15bf8a795222e5adb15000/node_modules/@vue/devtools-core/dist/index.js?v=7b7ae2d9"
import { addCustomTab, createRpcServer, devtools, setDevToolsEnv, setOpenInEditorBaseUrl, toggleComponentInspectorEnabled } from "/node_modules/.pnpm/@vue+devtools-kit@8.0.0/node_modules/@vue/devtools-kit/dist/index.js?v=7b7ae2d9"
import vueDevToolsOptions from "/@id/__x00__virtual:vue-devtools-options"

function normalizeUrl(url) {
  return new URL(`${vueDevToolsOptions.base || '/'}${url}`, import.meta.url).toString()
}

const overlayDir = normalizeUrl(`@id/virtual:vue-devtools-path:overlay`)
const body = document.getElementsByTagName('body')[0]
const head = document.getElementsByTagName('head')[0]

setDevToolsEnv({
  vitePluginDetected: true,
})

const devtoolsClientUrl = normalizeUrl(`__devtools__/`)
setDevToolsClientUrl(devtoolsClientUrl)
setOpenInEditorBaseUrl(normalizeUrl('').slice(0, -1))

toggleComponentInspectorEnabled(!!vueDevToolsOptions.componentInspector)

devtools.init()

// create vite inspect tab
addCustomTab({
  title: 'Vite Inspect',
  name: 'vite-inspect',
  icon: 'i-carbon-ibm-watson-discovery',
  view: {
    type: 'iframe',
    src: normalizeUrl(`__inspect/`),
  },
  category: 'advanced',
})

// create link stylesheet
const link = document.createElement('link')
link.rel = 'stylesheet'
link.href = `${overlayDir}/devtools-overlay.css`

// create script
const script = document.createElement('script')
script.src = `${overlayDir}/devtools-overlay.mjs`
script.type = 'module'

// append to head
head.appendChild(link)

// append to body
body.appendChild(script)

// Used in the browser extension
window.__VUE_DEVTOOLS_VITE_PLUGIN_CLIENT_URL__ = `${window.location.origin}${devtoolsClientUrl}`

createRpcServer(functions, {
  preset: 'iframe',
})

createRpcServer(functions, {
  preset: 'broadcast',
})

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpcnR1YWw6dnVlLWRldnRvb2xzLXBhdGg6b3ZlcmxheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmdW5jdGlvbnMsIHNldERldlRvb2xzQ2xpZW50VXJsIH0gZnJvbSBcIi9ub2RlX21vZHVsZXMvLnBucG0vQHZ1ZStkZXZ0b29scy1jb3JlQDguMC4wX3JvXzlkZjVhMDFhZmUxNWJmOGE3OTUyMjJlNWFkYjE1MDAwL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWNvcmUvZGlzdC9pbmRleC5qcz92PTdiN2FlMmQ5XCJcbmltcG9ydCB7IGFkZEN1c3RvbVRhYiwgY3JlYXRlUnBjU2VydmVyLCBkZXZ0b29scywgc2V0RGV2VG9vbHNFbnYsIHNldE9wZW5JbkVkaXRvckJhc2VVcmwsIHRvZ2dsZUNvbXBvbmVudEluc3BlY3RvckVuYWJsZWQgfSBmcm9tIFwiL25vZGVfbW9kdWxlcy8ucG5wbS9AdnVlK2RldnRvb2xzLWtpdEA4LjAuMC9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1raXQvZGlzdC9pbmRleC5qcz92PTdiN2FlMmQ5XCJcbmltcG9ydCB2dWVEZXZUb29sc09wdGlvbnMgZnJvbSBcIi9AaWQvX194MDBfX3ZpcnR1YWw6dnVlLWRldnRvb2xzLW9wdGlvbnNcIlxuXG5mdW5jdGlvbiBub3JtYWxpemVVcmwodXJsKSB7XG4gIHJldHVybiBuZXcgVVJMKGAke3Z1ZURldlRvb2xzT3B0aW9ucy5iYXNlIHx8ICcvJ30ke3VybH1gLCBpbXBvcnQubWV0YS51cmwpLnRvU3RyaW5nKClcbn1cblxuY29uc3Qgb3ZlcmxheURpciA9IG5vcm1hbGl6ZVVybChgQGlkL3ZpcnR1YWw6dnVlLWRldnRvb2xzLXBhdGg6b3ZlcmxheWApXG5jb25zdCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXVxuY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF1cblxuc2V0RGV2VG9vbHNFbnYoe1xuICB2aXRlUGx1Z2luRGV0ZWN0ZWQ6IHRydWUsXG59KVxuXG5jb25zdCBkZXZ0b29sc0NsaWVudFVybCA9IG5vcm1hbGl6ZVVybChgX19kZXZ0b29sc19fL2ApXG5zZXREZXZUb29sc0NsaWVudFVybChkZXZ0b29sc0NsaWVudFVybClcbnNldE9wZW5JbkVkaXRvckJhc2VVcmwobm9ybWFsaXplVXJsKCcnKS5zbGljZSgwLCAtMSkpXG5cbnRvZ2dsZUNvbXBvbmVudEluc3BlY3RvckVuYWJsZWQoISF2dWVEZXZUb29sc09wdGlvbnMuY29tcG9uZW50SW5zcGVjdG9yKVxuXG5kZXZ0b29scy5pbml0KClcblxuLy8gY3JlYXRlIHZpdGUgaW5zcGVjdCB0YWJcbmFkZEN1c3RvbVRhYih7XG4gIHRpdGxlOiAnVml0ZSBJbnNwZWN0JyxcbiAgbmFtZTogJ3ZpdGUtaW5zcGVjdCcsXG4gIGljb246ICdpLWNhcmJvbi1pYm0td2F0c29uLWRpc2NvdmVyeScsXG4gIHZpZXc6IHtcbiAgICB0eXBlOiAnaWZyYW1lJyxcbiAgICBzcmM6IG5vcm1hbGl6ZVVybChgX19pbnNwZWN0L2ApLFxuICB9LFxuICBjYXRlZ29yeTogJ2FkdmFuY2VkJyxcbn0pXG5cbi8vIGNyZWF0ZSBsaW5rIHN0eWxlc2hlZXRcbmNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJylcbmxpbmsucmVsID0gJ3N0eWxlc2hlZXQnXG5saW5rLmhyZWYgPSBgJHtvdmVybGF5RGlyfS9kZXZ0b29scy1vdmVybGF5LmNzc2BcblxuLy8gY3JlYXRlIHNjcmlwdFxuY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbnNjcmlwdC5zcmMgPSBgJHtvdmVybGF5RGlyfS9kZXZ0b29scy1vdmVybGF5Lm1qc2BcbnNjcmlwdC50eXBlID0gJ21vZHVsZSdcblxuLy8gYXBwZW5kIHRvIGhlYWRcbmhlYWQuYXBwZW5kQ2hpbGQobGluaylcblxuLy8gYXBwZW5kIHRvIGJvZHlcbmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuXG4vLyBVc2VkIGluIHRoZSBicm93c2VyIGV4dGVuc2lvblxud2luZG93Ll9fVlVFX0RFVlRPT0xTX1ZJVEVfUExVR0lOX0NMSUVOVF9VUkxfXyA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59JHtkZXZ0b29sc0NsaWVudFVybH1gXG5cbmNyZWF0ZVJwY1NlcnZlcihmdW5jdGlvbnMsIHtcbiAgcHJlc2V0OiAnaWZyYW1lJyxcbn0pXG5cbmNyZWF0ZVJwY1NlcnZlcihmdW5jdGlvbnMsIHtcbiAgcHJlc2V0OiAnYnJvYWRjYXN0Jyxcbn0pXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFDQUFxQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRO0FBQzFMLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUTtBQUNyTyxN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